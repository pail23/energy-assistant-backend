[tool.isort]
# https://github.com/PyCQA/isort/wiki/isort-Settings
profile = "black"
# will group `import x` and `from x import` of the same module.
force_sort_within_sections = true
known_first_party = [
    "tests",
]
forced_separate = [
    "tests",
]
combine_as_imports = true

[tool.ruff]

# The contents of this file is based on https://github.com/home-assistant/core/blob/dev/pyproject.toml

target-version = "py311"

select = [
    "B007", # Loop control variable {name} not used within loop body
    "B014", # Exception handler with duplicate exception
    "C",  # complexity
    "D",  # docstrings
    "E",  # pycodestyle
    "F",  # pyflakes/autoflake
    "ICN001", # import concentions; {name} should be imported as {asname}
    "PGH004",  # Use specific rule codes when using noqa
    "PLC0414", # Useless import alias. Import alias does not rename original package.
    "SIM105", # Use contextlib.suppress({exception}) instead of try-except-pass
    "SIM117", # Merge with-statements that use the same scope
    "SIM118", # Use {key} in {dict} instead of {key} in {dict}.keys()
    "SIM201", # Use {left} != {right} instead of not {left} == {right}
    "SIM212", # Use {a} if {a} else {b} instead of {b} if not {a} else {a}
    "SIM300", # Yoda conditions. Use 'age == 42' instead of '42 == age'.
    "SIM401", # Use get from dict with default instead of an if block
    "T20",  # flake8-print
    "TRY004", # Prefer TypeError exception for invalid type
    "RUF006", # Store a reference to the return value of asyncio.create_task
    "W",  # pycodestyle
]

ignore = [
    "D202",  # No blank lines allowed after function docstring
    "D203",  # 1 blank line required before class docstring
    "D213",  # Multi-line docstring summary should start at the second line
    "D404",  # First word of the docstring should not be This
    "D406",  # Section name should end with a newline
    "D407",  # Section name underlining
    "D411",  # Missing blank line before section
    "E501",  # line too long
    "E731",  # do not assign a lambda expression, use a def
    "T201",  # print found
]
exclude = ["migrations", "emhass"]
line-length = 100


[tool.ruff.per-file-ignores]
"app/models/__init__.py" = ["F401"]

[tool.black]
target-version = ['py311']
line-length = 100
exclude="migrations|emhass"

[flake8-pytest-style]
fixture-parentheses = false

[mccabe]
max-complexity = 25


[tool.mypy]
python_version = "3.11"

[[tool.mypy.overrides]]
module = [
  "app.*"
]
ignore_missing_imports = true
follow_imports = "skip"
disallow_untyped_defs = true
disallow_untyped_calls = true


[[tool.mypy.overrides]]
module = "emhass.*"
ignore_errors = true

[tool.pytest.ini_options]
asyncio_mode = "auto"
pythonpath = [
  ".",
]
testpaths = [
    "tests"
]
norecursedirs = [
    ".git"
]
disable_test_id_escaping_and_forfeit_all_rights_to_community_support = true
markers = [
  "tmp: Temporary",
  "optional: Optional",
]
env = [
  "APP_CONFIG_FILE=test"
]
